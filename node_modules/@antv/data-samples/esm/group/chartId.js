import { __awaiter, __generator } from "tslib";
import { chart as cd } from '../data';
import { dataByName } from './name';
export var DATA_SAMPLES_BY_CHART_ID = {
    // pie
    pie_chart: cd.pieChartTestData,
    donut_chart: cd.donutChartTestData,
    // line
    line_chart: cd.lineChartTestData,
    step_line_chart: cd.stepLineChartTestData,
    // area
    area_chart: cd.areaChartTestData,
    stacked_area_chart: cd.stackedAreaChartTestData,
    percent_stacked_area_chart: cd.stackedAreaChartTestData,
    // bar
    bar_chart: cd.barChartTestData,
    grouped_bar_chart: cd.groupedBarChartTestData,
    stacked_bar_chart: cd.stackedBarChartTestData,
    percent_stacked_bar_chart: cd.stackedBarChartTestData,
    // column
    column_chart: cd.columnChartTestData,
    grouped_column_chart: cd.groupedBarChartTestData,
    stacked_column_chart: cd.stackedBarChartTestData,
    percent_stacked_column_chart: cd.stackedBarChartTestData,
    // scatter
    scatter_plot: cd.scatterPlotTestData,
    // bubble
    bubble_chart: cd.bubbleChartTestData,
    // histogram
    histogram: cd.histogramTestData,
    // heatmap
    heatmap: cd.heatmapTestData,
};
export function dataByChartId(chartId) {
    return __awaiter(this, void 0, void 0, function () {
        var dsName, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!DATA_SAMPLES_BY_CHART_ID[chartId]) {
                        throw new Error("Data Sample for Chart ID ".concat(chartId, " is NOT available yet."));
                    }
                    dsName = DATA_SAMPLES_BY_CHART_ID[chartId].name;
                    return [4 /*yield*/, dataByName(dsName)];
                case 1:
                    data = _a.sent();
                    return [2 /*return*/, data];
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnRJZC5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJncm91cC9jaGFydElkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxJQUFJLEVBQUUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBS3BDLE1BQU0sQ0FBQyxJQUFNLHdCQUF3QixHQUF5QztJQUM1RSxNQUFNO0lBQ04sU0FBUyxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0I7SUFDOUIsV0FBVyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0I7SUFDbEMsT0FBTztJQUNQLFVBQVUsRUFBRSxFQUFFLENBQUMsaUJBQWlCO0lBQ2hDLGVBQWUsRUFBRSxFQUFFLENBQUMscUJBQXFCO0lBQ3pDLE9BQU87SUFDUCxVQUFVLEVBQUUsRUFBRSxDQUFDLGlCQUFpQjtJQUNoQyxrQkFBa0IsRUFBRSxFQUFFLENBQUMsd0JBQXdCO0lBQy9DLDBCQUEwQixFQUFFLEVBQUUsQ0FBQyx3QkFBd0I7SUFDdkQsTUFBTTtJQUNOLFNBQVMsRUFBRSxFQUFFLENBQUMsZ0JBQWdCO0lBQzlCLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyx1QkFBdUI7SUFDN0MsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLHVCQUF1QjtJQUM3Qyx5QkFBeUIsRUFBRSxFQUFFLENBQUMsdUJBQXVCO0lBQ3JELFNBQVM7SUFDVCxZQUFZLEVBQUUsRUFBRSxDQUFDLG1CQUFtQjtJQUNwQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsdUJBQXVCO0lBQ2hELG9CQUFvQixFQUFFLEVBQUUsQ0FBQyx1QkFBdUI7SUFDaEQsNEJBQTRCLEVBQUUsRUFBRSxDQUFDLHVCQUF1QjtJQUN4RCxVQUFVO0lBQ1YsWUFBWSxFQUFFLEVBQUUsQ0FBQyxtQkFBbUI7SUFDcEMsU0FBUztJQUNULFlBQVksRUFBRSxFQUFFLENBQUMsbUJBQW1CO0lBQ3BDLFlBQVk7SUFDWixTQUFTLEVBQUUsRUFBRSxDQUFDLGlCQUFpQjtJQUMvQixVQUFVO0lBQ1YsT0FBTyxFQUFFLEVBQUUsQ0FBQyxlQUFlO0NBQzVCLENBQUM7QUFFRixNQUFNLFVBQWdCLGFBQWEsQ0FBQyxPQUFnQjs7Ozs7O29CQUNsRCxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQTRCLE9BQU8sMkJBQXdCLENBQUMsQ0FBQztxQkFDOUU7b0JBRUssTUFBTSxHQUFHLHdCQUF3QixDQUFDLE9BQU8sQ0FBRSxDQUFDLElBQUksQ0FBQztvQkFDMUMscUJBQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFBOztvQkFBL0IsSUFBSSxHQUFHLFNBQXdCO29CQUVyQyxzQkFBTyxJQUFJLEVBQUM7Ozs7Q0FDYiJ9