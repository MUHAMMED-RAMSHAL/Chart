export declare const isNull: (value: any) => boolean;
export declare const isString: (value: any) => value is string;
export declare const isNumber: (value: any) => value is number;
/**
 * Checks if value is an digit
 * @param value
 * @returns
 */
export declare const isDigit: (value: string) => boolean;
export declare const isInteger: (value: any, convertString?: boolean) => value is number;
export declare const isFloat: (value: any, convertString?: boolean) => boolean;
export declare const isDate: (value: any, convertString?: boolean) => value is Date;
export declare const isBoolean: (value: any, convertStringAndNumber?: boolean) => boolean;
export declare const isObject: (value: any) => value is object;
export declare const isArray: (value: any) => value is any[];
export declare const isBasicType: (value: any) => boolean;
export declare const unique: (array: any[]) => any[];
/**
 * Generate an array from 0 to number.
 * @param number
 */
export declare const range: (number: Number) => number[];
export declare type Assert = (condition: any, errorMessage?: string) => asserts condition;
/**
 * assert
 * @param condition
 * @param errorMessage
 */
export declare const assert: Assert;
/**
 * Judge parent-child relationship. A child has only one parent, but a parent can have more children.
 * @param parent
 * @param child
 */
export declare const isParentChild: (parent: any[], child: any[]) => boolean;
/**
 * Return the flattened result of the array.
 * @param array - The array to process
 */
export declare function flatten(array: any[]): any[];
