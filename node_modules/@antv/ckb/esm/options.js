import { __read, __spreadArray } from "tslib";
import { FAMILY_OPTIONS, GRAPHIC_CATEGORY_OPTIONS, PURPOSE_OPTIONS, COORD_TYPE_OPTIONS, SHAPE_OPTIONS, CHANNEL_OPTIONS, LOM_OPTIONS, RECOMMEND_RATING_OPTIONS, } from './interface';
import { I18N } from './i18n';
/**
 * @param lang - Language of the options.
 * @public
 */
export function CKBOptions(lang) {
    if (lang === void 0) { lang = 'en-US'; }
    if (lang && lang !== 'en-US') {
        var translator = I18N(lang);
        if (translator && translator.concepts) {
            var concepts = translator.concepts;
            return {
                family: Object.values(concepts.family),
                category: Object.values(concepts.category),
                purpose: Object.values(concepts.purpose),
                coord: Object.values(concepts.coord),
                shape: Object.values(concepts.shape),
                channel: Object.values(concepts.channel),
                lom: Object.values(concepts.lom),
                recRate: Object.values(concepts.recRate),
            };
        }
    }
    return {
        family: __spreadArray([], __read(FAMILY_OPTIONS)),
        category: __spreadArray([], __read(GRAPHIC_CATEGORY_OPTIONS)),
        purpose: __spreadArray([], __read(PURPOSE_OPTIONS)),
        coord: __spreadArray([], __read(COORD_TYPE_OPTIONS)),
        shape: __spreadArray([], __read(SHAPE_OPTIONS)),
        channel: __spreadArray([], __read(CHANNEL_OPTIONS)),
        lom: __spreadArray([], __read(LOM_OPTIONS)),
        recRate: __spreadArray([], __read(RECOMMEND_RATING_OPTIONS)),
    };
}
