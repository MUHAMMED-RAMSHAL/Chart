import { ChartID } from './chartID';
/**
 * @public
 */
export declare const FAMILY_OPTIONS: readonly ["LineCharts", "ColumnCharts", "BarCharts", "PieCharts", "AreaCharts", "ScatterCharts", "FunnelCharts", "HeatmapCharts", "RadarCharts", "TreeGraph", "GeneralGraph", "PolygonLayer", "LineLayer", "PointLayer", "HeatmapLayer", "Table", "Others"];
/**
 * @public
 */
export declare type Family = (typeof FAMILY_OPTIONS)[number];
/**
 * @public
 */
export declare const PURPOSE_OPTIONS: readonly ["Comparison", "Trend", "Distribution", "Rank", "Proportion", "Composition", "Relation", "Hierarchy", "Flow", "Spatial", "Anomaly", "Value"];
/**
 * @public
 */
export declare type Purpose = (typeof PURPOSE_OPTIONS)[number];
/**
 * @public
 */
export declare const COORD_TYPE_OPTIONS: readonly ["NumberLine", "Cartesian2D", "SymmetricCartesian", "Cartesian3D", "Polar", "NodeLink", "Radar", "Geo", "Other"];
/**
 * @public
 */
export declare type CoordinateSystem = (typeof COORD_TYPE_OPTIONS)[number];
/**
 * @public
 */
export declare const GRAPHIC_CATEGORY_OPTIONS: readonly ["Statistic", "Diagram", "Graph", "Map", "Other"];
/**
 * @public
 */
export declare type GraphicCategory = (typeof GRAPHIC_CATEGORY_OPTIONS)[number];
/**
 * @public
 */
export declare const SHAPE_OPTIONS: readonly ["Lines", "Bars", "Round", "Square", "Area", "Scatter", "Symmetric", "Network", "Map", "Other"];
/**
 * @public
 */
export declare type Shape = (typeof SHAPE_OPTIONS)[number];
/**
 * @public
 */
export declare const LOM_OPTIONS: readonly ["Nominal", "Ordinal", "Interval", "Discrete", "Continuous", "Time"];
/**
 * @public
 */
export declare type LevelOfMeasurement = (typeof LOM_OPTIONS)[number];
/**
 * @public
 */
export interface DataPrerequisite {
    minQty: number;
    maxQty: number | '*';
    fieldConditions: LevelOfMeasurement[];
}
/**
 * @public
 */
export interface DataPrerequisiteJSON {
    minQty: number;
    maxQty: number | '*';
    fieldConditions: string[];
}
/**
 * @public
 */
export declare const CHANNEL_OPTIONS: readonly ["Position", "Length", "Color", "Area", "Angle", "ArcLength", "Direction", "Size", "Opacity", "Stroke", "LineWidth", "Lightness"];
/**
 * @public
 */
export declare type Channel = (typeof CHANNEL_OPTIONS)[number];
/**
 * @public
 */
export declare const RECOMMEND_RATING_OPTIONS: readonly ["Recommended", "Use with Caution", "Not Recommended"];
/**
 * @public
 */
export declare type RecommendRating = (typeof RECOMMEND_RATING_OPTIONS)[number];
/**
 * @public
 */
export interface ChartKnowledge {
    id: string;
    name: string;
    alias: string[];
    family: Family[];
    def: string;
    purpose: Purpose[];
    coord: CoordinateSystem[];
    category: GraphicCategory[];
    shape: Shape[];
    dataPres: DataPrerequisite[];
    channel: Channel[];
    recRate: RecommendRating;
}
export declare type ChartKnowledgeBase = Record<ChartID, ChartKnowledge>;
/**
 * @public
 */
export interface ChartKnowledgeJSON {
    id: string;
    name: string;
    alias: string[];
    family: string[];
    def: string;
    purpose: string[];
    coord: string[];
    category: string[];
    shape: string[];
    dataPres: DataPrerequisiteJSON[];
    channel: string[];
    recRate: string;
}
export declare type ChartKnowledgeBaseJSON = Record<string, ChartKnowledgeJSON>;
