import React, { useRef, useState, useEffect, useImperativeHandle, forwardRef } from 'react';
import { Select, Form, Modal, Input, DatePicker, InputNumber, Table, Popconfirm, Tabs, Button, Tooltip, ConfigProvider, message } from 'antd';
import zhCN from 'antd/es/locale/zh_CN';
import enUS from 'antd/es/locale/en_US';
import { Advisor } from '@antv/chart-advisor';
import { specToG2Plot } from '@antv/antv-spec';
import * as G2Plot from '@antv/g2plot';
import { CKBJson } from '@antv/ckb';
import { Thumbnail } from '@antv/thumbnails-component';
import { createPortal } from 'react-dom';
import { SettingOutlined, DeleteOutlined, InfoCircleOutlined } from '@ant-design/icons';
import { random as random$1 } from '@antv/data-wizard';
import { format } from 'date-fns';
import moment from 'moment';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var prefixCls = '__AUTO_CHART__';
var customChartType = ['kpi_panel', 'table'];
function uuid() {
    return "uuid" + '-xxxx-xxx'.replace(/x/g, function () { return (Math.random() * 16).toString(16); });
}
/* eslint-disable no-param-reassign */
/**
 * let targetElement can drag itself
 * @param target - targetHtml
 * @param dragEle - can drag area
 */
function draggable(target, dragEle) {
    var handlers = [];
    dragEle.onmousedown = function (event) {
        var shiftX = event.clientX - dragEle.getBoundingClientRect().left;
        var shiftY = event.clientY - dragEle.getBoundingClientRect().top;
        function moveAt(pageX, pageY) {
            target.style.left = pageX - shiftX + "px";
            target.style.top = pageY - shiftY + "px";
        }
        moveAt(event.pageX, event.pageY);
        function onMouseMove(event) {
            moveAt(event.pageX, event.pageY);
        }
        handlers.push(onMouseMove);
        // move the ball on mousemove
        document.addEventListener('mousemove', onMouseMove);
        // drop the ball, remove unneeded handlers
        dragEle.onmouseup = function () {
            handlers.forEach(function (item) {
                document.removeEventListener('mousemove', item);
            });
            target.onmouseup = null;
        };
    };
    dragEle.ondragstart = function () {
        return false;
    };
}
function getElePosition(containerRef, dragContainer) {
    var left = containerRef.offsetLeft;
    var top = containerRef.offsetTop;
    var boxWidth = containerRef.offsetWidth;
    var boxHeight = containerRef.offsetHeight;
    var dragWidth = dragContainer.offsetWidth;
    var dragHeight = dragContainer.offsetHeight;
    var wWidth = document.body.clientWidth;
    var wHeight = document.body.clientHeight;
    var dragLeftMax = left + boxWidth / 2;
    var dragLeftMin = left - dragWidth + boxWidth / 2;
    var dragTopMax = top + boxHeight / 2;
    var dragTopMin = top - dragHeight + boxHeight / 2;
    var dragLeft;
    var dragTop;
    if (dragLeftMax + dragWidth > wWidth) {
        dragLeft = dragLeftMin < 0 ? wWidth - dragWidth : dragLeftMin;
    }
    else {
        dragLeft = dragLeftMax;
    }
    if (dragTopMax + dragHeight > wHeight) {
        dragTop = dragTopMin < 0 ? wHeight - dragHeight : dragTopMin;
    }
    else {
        dragTop = dragTopMax;
    }
    return {
        left: dragLeft + "px",
        top: dragTop + "px",
    };
}

var Chart = function (_a) {
    var title = _a.title, description = _a.description, spec = _a.spec, chartRef = _a.chartRef, mockConfig = _a.mockConfig;
    var plotRef = useRef(null);
    var _b = __read(useState(null), 2), chartType = _b[0], setChartType = _b[1];
    var _c = __read(useState(null), 2), plot = _c[0], setPlot = _c[1];
    useEffect(function () {
        if (spec) {
            var plot_1 = specToG2Plot(spec, plotRef.current);
            setPlot(plot_1);
            setChartType(plot_1.constructor.name);
        }
    }, [spec]);
    useEffect(function () {
        if (mockConfig) {
            if (plot)
                plot.destroy();
            var g2plot = new G2Plot[mockConfig.config.type](plotRef.current, __assign(__assign({}, mockConfig.config.configs), { data: mockConfig.data }));
            g2plot.render();
            setPlot(g2plot);
            setChartType(g2plot.constructor.name);
        }
    }, [mockConfig]);
    useEffect(function () {
        if (spec === null && mockConfig === null) {
            setChartType(null);
            if (plot)
                plot.destroy();
            setPlot(null);
        }
    }, [spec, mockConfig]);
    useImperativeHandle(chartRef, function () {
        return {
            chartType: chartType,
            plot: plot,
        };
    });
    return (React.createElement("div", { className: prefixCls + "canvas-layer" },
        title && React.createElement("div", { className: "canvas-title" }, title),
        description && React.createElement("div", { className: "canvas-description" }, description),
        React.createElement("div", { className: "canvas-content" },
            React.createElement("div", { className: "feedback-layer", ref: plotRef }))));
};

var localeValues$1 = {
    NoRecommendation: 'No Recommendation',
    ChartConfig: 'Chart Config',
    NoData: 'No Data',
    NOSupportTemporarily: 'The data is too big to support temporarily',
    Initialize: 'Initialize',
    Score: 'Score',
    Total: 'Total',
    CopyConfig: 'Copy Config',
    CopySuccess: 'Copy Success',
    CopyData: 'CopyData',
    'Please Initialize Data Again': 'Please Initialize Data Again',
    /** mock panel part */
    'Copy Config': 'Copy Config',
    'Copy Success ': 'Copy Success',
    'Copy Data': 'Copy Data',
    Configure: 'Configure',
    'Are you sure to delete row?': 'Are you sure to delete row?',
    'Apply data': 'Apply data',
    'Select Chart': 'Select Chart',
    'Mock Data': 'Mock Data',
    Rows: 'Rows',
    'Display up to 100 items': 'Display up to 100 items',
    Settings: 'Settings',
    'Field Name': 'Field Name',
    'Field Type': 'Field Type',
    'Please input field name': 'Please input field name',
    'Please select field type': 'Please select field type',
    date: 'date',
    enum: 'enum',
    number: 'number',
    'Start Time': 'Start Time',
    'Start time is required': 'Start time is required',
    'End Time': 'End Time',
    'End time is required': 'End time is required',
    'End time must be bigger than Start Time': 'End time must be bigger than Start Time',
    'Time Span': 'Time Span',
    'Time Span Format is wrong': 'Time Span Format is wrong',
    's:second m:minute h:hour d:day e.g.5m': 's:second m:minute h:hour d:day e.g.5m',
    'Time span is required': 'Time span is required',
    Format: 'Format',
    'Format is wrong': 'Format is wrong',
    'y: year M:month d:day H:hour m:minute s:second e.g.yyyy/MM/dd': 'y: year M:month d:day H:hour m:minute s:second e.g.yyyy/MM/dd',
    'Time format is required': 'Time format is required',
    'Max number must be bigger than Small number': 'Max number must be bigger than Small number',
    Enumeration: 'Enumeration',
    'split with ","': 'split with ","',
    'Enumeration is required': 'Enumeration is required',
    Distribution: 'Distribution',
    'Distribution is required': 'Distribution is required',
    cartesian: 'cartesian',
    random: 'random',
    sequential: 'sequential',
    Minimum: 'Minimum',
    'Minimum is required': 'Minimum is required',
    Maximum: 'Maximum',
    'Maximum is required': 'Maximum is required',
    Precision: 'Precision',
    'Precision is required': 'Precision is required',
};

var localeValues = {
    NoRecommendation: '暂无推荐',
    ChartConfig: '图表配置',
    NoData: '暂无数据',
    NOSupportTemporarily: '数据量过大暂不支持绘制',
    Initialize: '初始化',
    Score: '推荐分',
    Total: '总计',
    CopyConfig: '拷贝配置',
    CopySuccess: '拷贝成功',
    CopyData: '拷贝数据',
    'Please Initialize Data Again': '请重新初始化数据',
    /** mock panel part */
    'Copy Config': '拷贝配置',
    'Copy Success ': '拷贝成功',
    'Copy Data': '拷贝数据',
    Configure: '去配置',
    'Are you sure to delete row?': '确认删除该列吗？',
    'Apply data': '应用数据',
    'Select Chart': '选择图表',
    'Mock Data': 'Mock数据',
    Rows: '行数',
    'Display up to 100 items': '最多显示 100 行',
    Settings: '设置',
    'Field Name': '字段名称',
    'Field Type': '字段类型',
    'Please input field name': '请填写字段名称',
    'Please select field type': '请选择字段类型',
    date: '日期',
    enum: '枚举',
    number: '数字',
    'Start Time': '开始日期',
    'Start time is required': '开始日期必填',
    'End Time': '结束时间',
    'End time is required': '结束日期必填',
    'End time must be bigger than Start Time': '结束时间必须大于开始时间',
    'Time Span': '时间间隔',
    's:second m:minute h:hour d:day e.g.5m': 's:秒 m:分 h:小时 d:天 例如: 5m',
    'Time span is required': '时间间隔必填',
    'Time Span Format is wrong': '时间间隔格式不正确',
    'Max number must be bigger than Small number': '最大值必须大于最小值',
    Format: '格式',
    'Format is wrong': '格式不正确',
    'y: year M:month d:day H:hour m:minute s:second e.g.yyyy/MM/dd': 'y: 年 M:月 d:天 H:时 m:分 s:秒 例如: yyyy/MM/dd',
    'Time format is required': '日期格式必填',
    Enumeration: '枚举值',
    'split with ","': '使用,(英文)分隔',
    'Enumeration is required': '枚举值不能为空',
    Distribution: '重复方式',
    'Distribution is required': '分布不能为空',
    cartesian: '组合',
    random: '随机',
    sequential: '循环',
    Minimum: '最小值',
    'Minimum is required': '最小值必填',
    Maximum: '最大值',
    'Maximum is required': '最大值必填',
    Precision: '精度',
    'Precision is required': '数值精度必填',
};

/* eslint-disable camelcase */
var locales = {
    'zh-CN': localeValues,
    'en-US': localeValues$1,
};
var intl = {
    get: function (key, language) {
        return locales[language || 'zh-CN'][key];
    },
};

var AdviceList = function (_a) {
    var advices = _a.advices, currentIndex = _a.currentIndex, language = _a.language, isActive = _a.isActive, onChartTypeChange = _a.onChartTypeChange;
    var _b = __read(useState(false), 2), adviceDisplay = _b[0], setAdviceDisplay = _b[1];
    var ChartWiki = CKBJson(language, true);
    // TODO || adviceToLibConfig(advice)
    var advicesTop3 = advices.filter(function (advice) { return !customChartType.includes(advice.type); }).slice(0, 3);
    var rankIcons = [
        'https://gw.alipayobjects.com/zos/antfincdn/61FtDvdTVl/no1.png',
        'https://gw.alipayobjects.com/zos/antfincdn/Y7AsvjRWNF/no2.png',
        'https://gw.alipayobjects.com/zos/antfincdn/2%24ruKwktmY/no3.png',
    ];
    var changeChartHandle = function (index) {
        if (currentIndex === index)
            return;
        onChartTypeChange(index);
    };
    useEffect(function () {
        if (isActive === false && adviceDisplay === true) {
            setAdviceDisplay(false);
        }
    }, [isActive]);
    return (React.createElement("div", { className: prefixCls + "toolbar" },
        React.createElement("div", { className: prefixCls + "config_btn", style: { display: isActive ? 'block' : 'none' }, onClick: function () { return setAdviceDisplay(!adviceDisplay); } },
            React.createElement("img", { src: "https://gw.alipayobjects.com/zos/antfincdn/krFnwF2VZi/retweet.png", alt: "" })),
        React.createElement("div", { className: prefixCls + "advice_container", style: { display: adviceDisplay ? 'block' : 'none' } },
            React.createElement("div", { className: prefixCls + "advice_content" }, advicesTop3.map(function (advice, index) {
                return (React.createElement("div", { className: prefixCls + "advice", key: index, onClick: function () { return changeChartHandle(index); } },
                    React.createElement("div", { className: prefixCls + "advice-thumbnail", "data-index": index },
                        React.createElement(Thumbnail, { chart: advice.type, "data-index": index })),
                    React.createElement("div", { className: prefixCls + "advice-desc" },
                        React.createElement("img", { src: rankIcons[index], "data-index": index }),
                        React.createElement("div", { className: "advice-chart-name", "data-index": index }, ChartWiki[advice.type].name),
                        React.createElement("div", { className: "advice-score-text", "data-index": index },
                            intl.get('Score', language),
                            React.createElement("span", { className: "advice-score" }, advice.score.toFixed(2))))));
            })),
            React.createElement("div", { className: prefixCls + "advice_arrow" }))));
};

var EmptyContent = function (_a) {
    var language = _a.language, noDataContent = _a.noDataContent, onOpenMock = _a.onOpenMock;
    return (React.createElement("div", { className: prefixCls + "no-data-layer" },
        React.createElement("div", { className: prefixCls + "mock_guide" },
            noDataContent || (React.createElement("div", null,
                React.createElement("div", { style: { marginBottom: 16 } },
                    React.createElement("img", { src: "https://gw.alipayobjects.com/zos/basement_prod/9a59280d-8f23-4234-b5cf-02956a91b6ff.svg", alt: "" })),
                React.createElement("div", null, intl.get('NoData', language)))),
            React.createElement("div", { className: prefixCls + "mock_guide_button", onClick: onOpenMock }, intl.get('Initialize', language)))));
};

var withDrag = function (DragComponent) {
    var WithDrag = function (props) {
        var dragRef = useRef(null);
        useEffect(function () {
            if (dragRef) {
                var _a = dragRef.current, dragContainer = _a.dragContainer, dragHandler = _a.dragHandler;
                draggable(dragContainer, dragHandler);
            }
        }, [dragRef]);
        return createPortal(React.createElement(DragComponent, __assign({}, props, { ref: dragRef })), document.body);
    };
    WithDrag.displayName = "withDrag(" + (DragComponent.displayName || DragComponent.name) + ")";
    return WithDrag;
};

/* eslint-disable no-param-reassign */
var random = new random$1.Random();
var MARK = {
    s: 1e3,
    m: 60 * 1e3,
    h: 60 * 60 * 1e3,
    d: 24 * 60 * 60 * 1e3,
};
function range(start, end, step) {
    var i = 0;
    var result = [];
    while (true) {
        var item = start + i * step;
        if (item > end)
            break;
        result.push(item);
        i += 1;
    }
    return result;
}
function dateRange(start, end, step, format$1) {
    if (!(typeof step === 'string' || typeof step === 'number'))
        throw new TypeError('xxx');
    if (typeof step === 'string') {
        if (/(\d+)(s|m|h|d)/.test(step)) {
            step = MARK[RegExp.$2] * Number.parseFloat(RegExp.$1);
        }
        else {
            throw new TypeError('xxx');
        }
    }
    if (typeof step === 'number') {
        if (step === 0 || Number.isNaN(step))
            throw new TypeError('xxxx');
    }
    if (typeof start === 'string') {
        start = new Date(start).getTime();
    }
    if (typeof end === 'string') {
        end = new Date(end).getTime();
    }
    return range(start, end, step).map(function (item) { return format(item, format$1); });
}
function getDivisor(fields, cindex) {
    var divisor = 1;
    for (var i = cindex + 1; i < fields.length; i += 1) {
        var field = fields[i];
        if (field && field.type === 'enum' && field.distribution === 'cartesian') {
            if (field.values && field.values.length) {
                divisor *= field.values.length || 1;
            }
        }
        if (field.type === 'date') {
            var _a = field, start = _a.start, end = _a.end, step = _a.step, format = _a.format;
            var dates = dateRange(start, end, step, format);
            if (dates && dates.length) {
                divisor *= dates.length;
            }
        }
    }
    return divisor;
}
var mockFields = [
    { type: 'date', start: '2019-01-01', end: '2019-01-10', step: '1d', format: 'yyyy/MM/dd', name: 'date' },
    { type: 'enum', values: ['Shanghai', 'London'], distribution: 'cartesian', name: 'city' },
    { type: 'number', name: 'count', min: 0, max: 1000, decimals: 0 },
];
function getOptimalCount(fields) {
    if (fields.every(function (item) { return item.type === 'number'; }))
        return NaN;
    return getDivisor(fields, -1);
}
function mock(fields, count) {
    var factories = fields.map(function (item, cindex) {
        if (item.type === 'number') {
            var _a = item, _b = _a.min, min_1 = _b === void 0 ? 0 : _b, _c = _a.max, max_1 = _c === void 0 ? 1000 : _c, _d = _a.decimals, decimals_1 = _d === void 0 ? 0 : _d;
            return function () { return random.float({ min: min_1, max: max_1, fixed: decimals_1 }); };
        }
        if (item.type === 'enum') {
            var _e = item, values_1 = _e.values, distribution_1 = _e.distribution;
            return function (rindex) {
                if (distribution_1 === 'cartesian') {
                    var divisor = getDivisor(fields, cindex);
                    return values_1[Math.floor(rindex / divisor) % values_1.length];
                }
                if (distribution_1 === 'sequential')
                    return values_1[rindex % values_1.length];
                return random.pickone(values_1);
            };
        }
        if (item.type === 'date') {
            var _f = item, start = _f.start, end = _f.end, step = _f.step, format = _f.format;
            var values_2 = dateRange(start, end, step, format);
            var divisor_1 = getDivisor(fields, cindex);
            return function (rindex) { return values_2[Math.floor(rindex / divisor_1) % values_2.length]; };
        }
        return null;
    });
    return new Array(count).fill(undefined).map(function (_, rindex) {
        var row = {};
        factories.forEach(function (factory, cindex) {
            row[fields[cindex].name] = factory(rindex);
        });
        return row;
    });
}

var lines = mock([
    { name: 'date', type: 'date', start: '2019/03/01', end: '2019/03/10', step: '1d', format: 'yyyy/MM/dd' },
    { name: 'value', type: 'number', min: 0, max: 1000 },
    { name: 'city', type: 'enum', values: ['Paris', 'London', 'New York'], distribution: 'cartesian' },
], 30);
var line = mock([
    { name: 'date', type: 'date', start: '2019/03/01', end: '2019/03/10', step: '1d', format: 'yyyy/MM/dd' },
    { name: 'value', type: 'number', min: 0, max: 1000 },
], 10);
var pie = mock([
    {
        name: 'type',
        values: ['Shanghai', 'Chengdu', 'Hangzhou', 'Shenzhen'],
        type: 'enum',
        distribution: 'cartesian',
    },
    { name: 'value', type: 'number', min: 0, max: 1000 },
], 4);
var bar = mock([
    {
        name: 'city',
        values: ['Shanghai', 'Chengdu', 'Hangzhou', 'Shenzhen', 'Hong Kong', 'Beijing', 'Chongqing'],
        type: 'enum',
        distribution: 'cartesian',
    },
    { name: 'value', type: 'number', min: 0, max: 1000 },
], 7);
var bars = mock([
    {
        name: 'city',
        values: ['Shanghai', 'Chengdu', 'Hangzhou', 'Shenzhen', 'Hong Kong', 'Beijing', 'Chongqing'],
        type: 'enum',
        distribution: 'cartesian',
    },
    {
        name: 'gender',
        values: ['male', 'female'],
        type: 'enum',
        distribution: 'cartesian',
    },
    { name: 'value', type: 'number', min: 0, max: 1000 },
], 14);
var barss = mock([
    {
        name: 'city',
        values: ['Shanghai', 'Chengdu', 'Hangzhou', 'Shenzhen', 'Hong Kong', 'Beijing', 'Chongqing'],
        type: 'enum',
        distribution: 'cartesian',
    },
    {
        name: 'type',
        values: ['category1', 'category2', 'category3'],
        type: 'enum',
        distribution: 'cartesian',
    },
    { name: 'value', type: 'number', min: 0, max: 1000 },
], 21);
var radar = mock([
    {
        name: 'type',
        values: ['defense', 'attack', 'speed', 'penetration', 'armor', 'critical'],
        type: 'enum',
        distribution: 'cartesian',
    },
    {
        name: 'name',
        values: ['Sun Shangxiang', 'Huang Zhong'],
        type: 'enum',
        distribution: 'cartesian',
    },
    { name: 'value', type: 'number', min: 0, max: 100 },
], 12);
var histogram = mock([{ name: 'value', type: 'number', min: 0, max: 100 }], 60);
var scatter = mock([
    {
        name: 'city',
        values: ['Shanghai', 'Chengdu', 'Hangzhou'],
        type: 'enum',
        distribution: 'random',
    },
    { name: 'count', type: 'number', min: 0, max: 1000 },
    { name: 'value', type: 'number', min: 0, max: 1000 },
], 1000);
var bubble = mock([
    {
        name: 'city',
        values: ['Shanghai', 'Chengdu'],
        type: 'enum',
        distribution: 'random',
    },
    { name: 'count', type: 'number', min: 0, max: 1000 },
    { name: 'value', type: 'number', min: 0, max: 1000 },
    { name: 'size', type: 'number', min: 0, max: 1000 },
], 100);
var heatmap = mock([
    {
        name: 'city',
        values: ['Shanghai', 'Chengdu', 'Hangzhou', 'Shenzhen', 'Hong Kong', 'Beijing', 'Chongqing'],
        type: 'enum',
        distribution: 'cartesian',
    },
    {
        name: 'type',
        values: ['category1', 'category2', 'category3', 'category4', 'category5', 'category6', 'category7', 'category8'],
        type: 'enum',
        distribution: 'cartesian',
    },
    { name: 'value', type: 'number', min: 0, max: 100 },
], 56);
var CONFIG_MAP = {
    line_chart: {
        data: lines,
        configs: {
            xField: 'date',
            yField: 'value',
            seriesField: 'city',
        },
        type: 'Line',
    },
    stacked_area_chart: {
        data: lines,
        configs: {
            xField: 'date',
            yField: 'value',
            seriesField: 'city',
            isStack: true,
        },
        type: 'Area',
    },
    pie_chart: {
        data: pie,
        configs: {
            angleField: 'value',
            colorField: 'type',
        },
        type: 'Pie',
    },
    donut_chart: {
        data: pie,
        configs: {
            angleField: 'value',
            colorField: 'type',
            innerRadius: 0.64,
            statistic: {
                title: {
                    offsetY: -18,
                    style: {
                        fontSize: 16,
                    },
                },
                content: {
                    offsetY: 8,
                    style: {
                        fontSize: 24,
                    },
                },
            },
        },
        type: 'Pie',
    },
    area_chart: {
        data: line,
        configs: {
            xField: 'date',
            yField: 'value',
        },
        type: 'Area',
    },
    column_chart: {
        data: bar,
        configs: {
            xField: 'city',
            yField: 'value',
        },
        type: 'Column',
    },
    grouped_column_chart: {
        data: bars,
        configs: {
            xField: 'city',
            yField: 'value',
            seriesField: 'gender',
            isGroup: true,
        },
        type: 'Column',
    },
    stacked_column_chart: {
        data: bars,
        configs: {
            xField: 'city',
            yField: 'value',
            seriesField: 'gender',
            isStack: true,
        },
        type: 'Column',
    },
    percent_stacked_column_chart: {
        data: barss,
        configs: {
            xField: 'city',
            yField: 'value',
            seriesField: 'type',
            isStack: true,
            isPercent: true,
        },
        type: 'Column',
    },
    bar_chart: {
        data: bar,
        configs: {
            xField: 'value',
            yField: 'city',
        },
        type: 'Bar',
    },
    grouped_bar_chart: {
        data: bars,
        configs: {
            xField: 'value',
            yField: 'city',
            seriesField: 'gender',
            isGroup: true,
        },
        type: 'Bar',
    },
    stacked_bar_chart: {
        data: bars,
        configs: {
            xField: 'value',
            yField: 'city',
            seriesField: 'gender',
            isStack: true,
        },
        type: 'Bar',
    },
    percent_stacked_bar_chart: {
        data: barss,
        configs: {
            xField: 'value',
            yField: 'city',
            seriesField: 'type',
            isStack: true,
            isPercent: true,
        },
        type: 'Bar',
    },
    scatter_plot: {
        data: scatter,
        configs: {
            xField: 'value',
            yField: 'count',
            colorField: 'city',
            shape: 'circle',
        },
        type: 'Scatter',
    },
    bubble_chart: {
        data: bubble,
        configs: {
            xField: 'value',
            yField: 'count',
            sizeField: 'size',
            colorField: 'city',
            size: [2, 16],
            shape: 'circle',
        },
        type: 'Scatter',
    },
    radar_chart: {
        data: radar,
        configs: {
            xField: 'type',
            yField: 'value',
            seriesField: 'name',
        },
        type: 'Radar',
    },
    histogram: {
        data: histogram,
        configs: {
            binField: 'value',
            binWidth: 4,
        },
        type: 'Histogram',
    },
    heatmap: {
        data: heatmap,
        configs: {
            xField: 'type',
            yField: 'city',
            colorField: 'value',
        },
        type: 'Heatmap',
    },
};

var CHART_NAMES = [
    'line_chart',
    'area_chart',
    'bar_chart',
    'grouped_bar_chart',
    'stacked_bar_chart',
    'percent_stacked_bar_chart',
    'column_chart',
    'grouped_column_chart',
    'stacked_column_chart',
    'percent_stacked_column_chart',
    'stacked_area_chart',
    'pie_chart',
    'donut_chart',
    'radar_chart',
    'scatter_plot',
    'bubble_chart',
    'histogram',
    'heatmap',
];
var ChartContent = function (props) {
    var language = props.language, chartType = props.chartType;
    var ChartWiki = CKBJson(language, true);
    return (React.createElement("div", { className: prefixCls + "mockchart-container" }, CHART_NAMES.map(function (key) {
        return (React.createElement("div", { key: key, className: "chart-item" + (chartType === key ? ' active' : '') },
            React.createElement("div", { className: "chart" },
                React.createElement(Thumbnail, { chart: key, onClick: function () { return props.onMockChartTypeChange(key); } })),
            React.createElement("div", null, ChartWiki[key].name)));
    })));
};

var Option = Select.Option;
var formItemLayout = {
    labelCol: { span: 6 },
    wrapperCol: { span: 18 },
};
var SettingModal = function (props) {
    var language = props.language, value = props.value;
    var _a = __read(useState((value === null || value === void 0 ? void 0 : value.type) || ''), 2), dataType = _a[0], setDataType = _a[1];
    var _b = __read(Form.useForm(), 1), formRef = _b[0];
    var intlget = function (key) {
        return intl.get(key, language);
    };
    var onOk = function () {
        formRef
            .validateFields()
            .then(function (res) {
            var newFields = __assign({}, res);
            if (dataType === 'enum') {
                var newValues = res.values.split(',').filter(function (item) {
                    return item.trim().length > 0;
                });
                newFields.values = newValues;
            }
            if (dataType === 'date') {
                newFields.start = moment(res.start).format('YYYY-MM-DD HH:mm:ss');
                newFields.end = moment(res.end).format('YYYY-MM-DD HH:mm:ss');
            }
            props.onOK(newFields);
        })
            .catch(function (errInfo) {
            throw new Error(errInfo);
        });
    };
    return (React.createElement(Modal, { style: { top: 10 }, title: intl.get('Settings', language), visible: true, onOk: onOk, onCancel: props.onCancel },
        React.createElement(Form, __assign({}, formItemLayout, { form: formRef }),
            React.createElement(Form.Item, { name: "name", rules: [{ required: true, message: intlget('Please input field name') }], label: intlget('Field Name'), initialValue: value.name },
                React.createElement(Input, null)),
            React.createElement(Form.Item, { name: "type", label: intlget('Field Type'), rules: [{ required: true, message: intlget('Please select field type') }], initialValue: value.type },
                React.createElement(Select, { allowClear: false, onChange: function (selectType) { return setDataType(selectType); } },
                    React.createElement(Option, { value: "date" }, intlget('date')),
                    React.createElement(Option, { value: "enum" }, intlget('enum')),
                    React.createElement(Option, { value: "number" }, intlget('number')))),
            dataType === 'date' && (React.createElement(React.Fragment, null,
                React.createElement(Form.Item, { name: "start", label: intlget('Start Time'), rules: [{ required: true, message: intlget('Start time is required') }], initialValue: value.start ? moment(value.start) : moment() },
                    React.createElement(DatePicker, { showTime: true })),
                React.createElement(Form.Item, { name: "end", label: intlget('End Time'), rules: [
                        { required: true, message: intlget('End time is required') },
                        function (_a) {
                            var getFieldValue = _a.getFieldValue;
                            return ({
                                validator: function (_, value) {
                                    var startTime = getFieldValue('start');
                                    if (value && getFieldValue('start')) {
                                        if (moment(value).unix() < moment(startTime).unix()) {
                                            return Promise.reject(new Error('End time must be bigger than Start Time'));
                                        }
                                    }
                                    return Promise.resolve();
                                },
                            });
                        },
                    ], initialValue: value.end ? moment(value.end) : moment() },
                    React.createElement(DatePicker, { showTime: true })),
                React.createElement(Form.Item, { name: "step", label: intlget('Time Span'), help: intlget('s:second m:minute h:hour d:day e.g.5m'), rules: [
                        { required: true, message: intlget('Time span is required') },
                        {
                            validator: function (_rule, value, callback) {
                                var reg = /^[0-9]+[smhd]$/;
                                if (parseInt(value, 10) === 0 || !reg.test(value)) {
                                    return callback('Time Span Format is wrong');
                                }
                                return callback();
                            },
                        },
                    ], initialValue: value.step || '1d' },
                    React.createElement(Input, null)),
                React.createElement(Form.Item, { name: "format", label: intlget('Format'), help: intlget('y: year M:month d:day H:hour m:minute s:second e.g.yyyy/MM/dd'), rules: [
                        { required: true, message: intlget('Time format is required') },
                        {
                            validator: function (_rule, value, callback) {
                                var sameStr = '[^yYMmDdHhMmSs]';
                                var sameOr = "$|" + sameStr + "$|" + sameStr;
                                var regStr = "^yyyy(" + sameOr + "MM(" + sameOr + "dd(" + sameOr + " HH(" + sameOr + "mm(" + sameOr + "ss)))))";
                                var reg = new RegExp(regStr);
                                if (!reg.test(value)) {
                                    return callback('Format is wrong');
                                }
                                return callback();
                            },
                        },
                    ], initialValue: value.format || 'yyyy/MM/dd' },
                    React.createElement(Input, null)))),
            dataType === 'enum' && (React.createElement(React.Fragment, null,
                React.createElement(Form.Item, { name: "values", label: intlget('Enumeration'), help: intlget('split with ","'), rules: [
                        { required: true, message: intlget('Enumeration is required') },
                        {
                            validator: function (_rule, value, callback) {
                                var reg = /,,/;
                                if (value && reg.test(value)) {
                                    return callback('Time Span Format is wrong');
                                }
                                return callback();
                            },
                        },
                    ], initialValue: value.values ? value.values.join(',') : '' },
                    React.createElement(Input.TextArea, null)),
                React.createElement(Form.Item, { name: "distribution", label: intlget('Distribution'), rules: [{ required: true, message: intlget('Distribution is required') }], initialValue: value.distribution },
                    React.createElement(Select, null,
                        React.createElement(Option, { value: "cartesian" }, intlget('cartesian')),
                        React.createElement(Option, { value: "random" }, intlget('random')),
                        React.createElement(Option, { value: "sequential" }, intlget('sequential')))))),
            dataType === 'number' && (React.createElement(React.Fragment, null,
                React.createElement(Form.Item, { name: "min", label: intlget('Minimum'), rules: [{ required: true, message: intlget('Minimum is required') }], initialValue: value.min || 0 },
                    React.createElement(InputNumber, null)),
                React.createElement(Form.Item, { name: "max", label: intlget('Maximum'), rules: [
                        { required: true, message: intlget('Maximum is required') },
                        function (_a) {
                            var getFieldValue = _a.getFieldValue;
                            return ({
                                validator: function (_, value) {
                                    if (value && getFieldValue('min') && value <= getFieldValue('min')) {
                                        return Promise.reject(new Error('Max number must be bigger than Small number'));
                                    }
                                    return Promise.resolve();
                                },
                            });
                        },
                    ], initialValue: value.max || 0 },
                    React.createElement(InputNumber, null)),
                React.createElement(Form.Item, { name: "decimals", label: intlget('Precision'), rules: [{ required: true, message: intlget('Precision is required') }], initialValue: value.decimals || 0 },
                    React.createElement(InputNumber, { min: 0, step: 1 })))))));
};

var DataContent = function (props) {
    var language = props.language, onFieldDataChange = props.onFieldDataChange, customizeData = props.customizeData;
    var _a = __read(useState(null), 2), editingIndex = _a[0], setEditingIndex = _a[1];
    var _b = __read(useState(mockFields), 2), tableFields = _b[0], setFields = _b[1];
    var _c = __read(useState(props.count || 20), 2), count = _c[0], setCount = _c[1];
    var setNewData = function (newFields) {
        var optimal = getOptimalCount(newFields);
        var newCount = Number.isNaN(optimal) ? count : optimal;
        var mockData = mock(newFields, newCount);
        setEditingIndex(null);
        setCount(newCount);
        setFields(newFields);
        onFieldDataChange(mockData);
    };
    var onEdit = function (index) {
        setEditingIndex(index);
    };
    var onClear = function (index) {
        var newFields = __spreadArray([], __read(tableFields));
        newFields.splice(index, 1);
        setNewData(newFields);
    };
    var onSetChange = function (resetField) {
        var newFields = __spreadArray([], __read(tableFields));
        newFields.splice(editingIndex, 1, resetField);
        setNewData(newFields);
    };
    useEffect(function () {
        var mockData = mock(tableFields, props.count);
        setCount(props.count);
        onFieldDataChange(__spreadArray([], __read(mockData)));
    }, [props.count]);
    var columnsRender = function () {
        return new Array(4).fill(undefined).map(function (_, index) {
            if (tableFields[index]) {
                var name_1 = tableFields[index].name;
                return {
                    title: (React.createElement("span", { className: "table-title" },
                        name_1,
                        React.createElement(SettingOutlined, { onClick: function () { return onEdit(index); } }),
                        React.createElement(Popconfirm, { title: intl.get('Are you sure to delete row?', language), onConfirm: function () { return onClear(index); } },
                            React.createElement(DeleteOutlined, null)))),
                    key: "col-" + (index + 1),
                    width: '25%',
                    dataIndex: name_1,
                };
            }
            return {
                title: (React.createElement("span", { className: "table-title" },
                    "--",
                    React.createElement(SettingOutlined, { onClick: function () { return onEdit(index); } }))),
                key: "col-" + (index + 1),
                width: '25%',
                render: function () {
                    return '--';
                },
            };
        });
    };
    return (React.createElement("div", { className: prefixCls + "mockdata-container" },
        React.createElement(Table, { rowKey: "__uuid", scroll: { y: 360 }, dataSource: customizeData.slice(0, 100).map(function (item) { return (__assign(__assign({}, item), { __uuid: uuid() })); }), columns: columnsRender(), pagination: false }),
        editingIndex !== null && (React.createElement(SettingModal, { value: tableFields[editingIndex] || { name: '', type: null }, onOK: onSetChange, language: language, onCancel: function () { return setEditingIndex(null); } }))));
};

var MockContent = function (props) {
    var language = props.language;
    var _a = __read(useState('chart'), 2), tabkey = _a[0], setTabkey = _a[1];
    var _b = __read(useState(null), 2), chartType = _b[0], setChartType = _b[1];
    var _c = __read(useState(20), 2), count = _c[0], setCount = _c[1];
    var _d = __read(useState(mock(mockFields, 20)), 2), customizeData = _d[0], setCustomizeData = _d[1];
    var onMockChartTypeChange = function (key) {
        setChartType(key);
    };
    var onDeploy = function () {
        if (tabkey === 'chart' && chartType) {
            var _a = CONFIG_MAP[chartType], data = _a.data, restConfig = __rest(_a, ["data"]);
            var config = __assign(__assign({}, restConfig), { chartType: chartType });
            props.onMockDataChange({
                result: { config: config, data: data },
            });
        }
        else if (tabkey === 'data') {
            props.onMockDataChange({
                result: { data: __spreadArray([], __read(customizeData)) },
            });
        }
    };
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: prefixCls + "config_content" },
            React.createElement(Tabs, { tabBarGutter: 25, tabBarStyle: { paddingLeft: 20 }, activeKey: tabkey, onChange: setTabkey },
                React.createElement(Tabs.TabPane, { tab: intl.get('Select Chart', language), key: "chart" }),
                React.createElement(Tabs.TabPane, { tab: intl.get('Mock Data', language), key: "data" })),
            tabkey === 'chart' && (React.createElement(ChartContent, { language: language, chartType: chartType, onMockChartTypeChange: onMockChartTypeChange })),
            tabkey === 'data' && (React.createElement(DataContent, { language: language, count: count, customizeData: customizeData, onFieldDataChange: setCustomizeData }))),
        React.createElement("div", { className: prefixCls + "config_footer" },
            tabkey === 'chart' && (React.createElement("div", { className: prefixCls + "config_chart_footer" },
                React.createElement(Button, { disabled: !chartType, type: "primary", onClick: onDeploy }, intl.get('Configure', language)))),
            tabkey === 'data' && (React.createElement("div", { className: prefixCls + "config_data_footer" },
                React.createElement("div", null,
                    React.createElement(Tooltip, { title: intl.get('Display up to 100 items', language) },
                        intl.get('Rows'),
                        React.createElement(InfoCircleOutlined, { className: prefixCls + "number_tip" })),
                    React.createElement(InputNumber, { onChange: function (countValue) { return setCount(countValue); }, value: count, min: 0, step: 1 })),
                React.createElement(Button, { type: "primary", onClick: onDeploy }, intl.get('Apply data', language)))))));
};

// eslint-disable-next-line react/display-name
var MockPanel = forwardRef(function (props, ref) {
    var language = props.language, _a = props.mockDisplay, mockDisplay = _a === void 0 ? false : _a, containerRef = props.containerRef, onMockDataChange = props.onMockDataChange;
    var dragContainer = useRef(null);
    var dragHandler = useRef(null);
    var onConfigClose = function () {
        props.onClose();
    };
    useEffect(function () {
        if (mockDisplay) {
            if (containerRef) {
                var elePosition = getElePosition(containerRef.current, dragContainer.current);
                dragContainer.current.style.left = elePosition.left;
                dragContainer.current.style.top = elePosition.top;
            }
            dragContainer.current.style.display = 'block';
        }
        if (!mockDisplay && dragContainer) {
            dragContainer.current.style.display = 'none';
        }
    }, [mockDisplay]);
    useImperativeHandle(ref, function () {
        return {
            dragContainer: dragContainer.current,
            dragHandler: dragHandler.current,
        };
    });
    return (React.createElement("div", { className: prefixCls + "dev_panel", style: { width: 600, height: 604 }, ref: dragContainer },
        React.createElement("div", { className: prefixCls + "config_panel" },
            React.createElement("div", { className: prefixCls + "config_header", ref: dragHandler },
                intl.get('Initialize', language),
                React.createElement("img", { src: "https://gw.alipayobjects.com/zos/antfincdn/5mKWpRQ053/close.png", onClick: onConfigClose })),
            React.createElement(MockContent, { language: language, onMockDataChange: onMockDataChange }))));
});
var dragMockPanel = withDrag(MockPanel);

var AutoChart = function (props) {
    var _a;
    var _b = props.data, propsData = _b === void 0 ? [] : _b, _c = props.width, width = _c === void 0 ? '100%' : _c, _d = props.height, height = _d === void 0 ? '100%' : _d, _e = props.language, language = _e === void 0 ? 'zh-CN' : _e, _f = props.noDataContent, noDataContent = _f === void 0 ? null : _f, className = props.className, title = props.title, description = props.description, _g = props.showRanking, showRanking = _g === void 0 ? true : _g;
    var containerRef = useRef(null);
    var chartRef = useRef(null);
    var myAdvisor = new Advisor();
    var _h = __read(useState([]), 2), advices = _h[0], setAdvices = _h[1];
    var _j = __read(useState(0), 2), currentAdviceIndex = _j[0], setCurrentAdviceIndex = _j[1];
    var _k = __read(useState(propsData || []), 2), currentData = _k[0], setCurrentData = _k[1];
    var _l = __read(useState(null), 2), mockType = _l[0], setMockType = _l[1];
    var _m = __read(useState(null), 2), mockConfigs = _m[0], setMockConfigs = _m[1];
    var _o = __read(useState(false), 2), isActive = _o[0], setHover = _o[1];
    var _p = __read(useState(false), 2), mockDisplay = _p[0], setMockDisplay = _p[1];
    useEffect(function () {
        if (containerRef) {
            containerRef.current.style.width = width + "px";
            containerRef.current.style.height = height + "px";
        }
    }, [width, height]);
    useEffect(function () {
        setAdvices([]);
        setCurrentData(propsData);
    }, [JSON.stringify(propsData)]);
    useEffect(function () {
        if (currentData.length > 0) {
            var myAdvices = myAdvisor.advise({ data: currentData });
            setAdvices(myAdvices);
            setCurrentAdviceIndex(0);
        }
    }, [currentData]);
    var onChartTypeChange = function (index) {
        setCurrentAdviceIndex(index);
    };
    var onMockDataChange = function (mockResult) {
        var result = mockResult.result;
        // setConfigs(null);
        setMockDisplay(false);
        if (result.config) {
            setMockConfigs(result);
            setMockType('Chart');
            return;
        }
        if (result.data) {
            var myAdvices = myAdvisor.advise({ data: result.data });
            if (myAdvices.length > 0) {
                setCurrentData(__spreadArray([], __read(result.data)));
            }
            else {
                message.error(intl.get('Please Initialize Data Again', language));
            }
        }
    };
    return (React.createElement(ConfigProvider, { locale: language === 'zh-CN' ? zhCN : enUS },
        React.createElement("div", { className: prefixCls + "container " + (className || ''), ref: containerRef, onMouseOver: function () { return setHover(true); }, onMouseLeave: function () { return setHover(false); } },
            (currentData.length > 0 || mockType) && (React.createElement(Chart, { title: title, description: description, chartRef: chartRef, spec: ((_a = advices[currentAdviceIndex]) === null || _a === void 0 ? void 0 : _a.spec) || null, mockConfig: mockConfigs })),
            showRanking && currentData.length > 0 && advices.length > 0 && (React.createElement(AdviceList, { language: language, advices: advices, currentIndex: currentAdviceIndex, isActive: isActive, onChartTypeChange: onChartTypeChange })),
            currentData.length === 0 && !mockType && (React.createElement(EmptyContent, { language: language, noDataContent: noDataContent, onOpenMock: function () { return setMockDisplay(true); } })),
            React.createElement(dragMockPanel, { mockDisplay: mockDisplay, language: language, containerRef: containerRef, onClose: function () { return setMockDisplay(false); }, onMockDataChange: onMockDataChange }))));
};

export { AutoChart };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
