import { __assign } from "tslib";
import { scaleRules } from './pred-scale-type';
import { encodingRules } from './pred-encoding';
import { edgeTypeRules } from './pred-edge-type';
import { nodeTypeRules } from './pred-node-type';
import { allLayoutTypeRules } from './pred-layout-type';
import { layoutConfigPredRule } from './pred-layout-cfg';
var layoutRules = __assign(__assign({}, allLayoutTypeRules), { 'pred-layout-config': layoutConfigPredRule });
export var ruleSet = {
    scaleRules: scaleRules,
    encodingRules: encodingRules,
    edgeTypeRules: edgeTypeRules,
    nodeTypeRules: nodeTypeRules,
    layoutRules: layoutRules,
};
export var allBuiltInRules = __assign(__assign(__assign(__assign(__assign({}, scaleRules), encodingRules), edgeTypeRules), nodeTypeRules), layoutRules);
/**
 * Check, filter and sort all candidate fields according to a soft rule or a hard rule
 * @param candidates
 * @param ruleId
 * @returns Testing the rule, and return the candidates that match the rule. If the rule scores the candidates, they are sorted from highest to lowest score.
 */
export var testRule = function (candidates, ruleId) {
    var validatedCandidates = [];
    var rule = allBuiltInRules[ruleId];
    if (rule.type === 'HARD') {
        validatedCandidates = candidates.filter(function (item) { return rule.validator({ field: item }); });
    }
    else if (rule.type === 'SOFT') {
        validatedCandidates = candidates.map(function (item) {
            return {
                item: item,
                score: rule.validator({ field: item }),
            };
        });
        validatedCandidates.sort(function (a, b) { return b.score - a.score; });
    }
    return validatedCandidates;
};
/**
 *
 * @param id rule id
 * @returns the rule object or null if `id` not exist in built-in rules
 */
export var getRuleById = function (id) {
    if (Object.keys(allBuiltInRules).includes(id)) {
        return allBuiltInRules[id];
    }
    return null;
};
/**
 *
 * @param ids rule list
 * @returns rule object record
 */
export var getRules = function (ids) {
    if (!ids || !ids.length) {
        return allBuiltInRules;
    }
    var chartRules = {};
    ids.forEach(function (id) {
        if (Object.keys(allBuiltInRules).includes(id)) {
            chartRules[id] = allBuiltInRules[id];
        }
    });
    return chartRules;
};
