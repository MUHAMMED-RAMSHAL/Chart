import { analyzer } from '@antv/data-wizard';
import { MAX_DISTINCT_COLOR } from '../../../constants';
var applyChartTypes = ['graph'];
export var fieldForColorRule = {
    id: 'field-for-node-color',
    type: 'HARD',
    docs: {
        detailedText: "A field can encode to color if is nominal or ordinal, and the number of its distinct values is less than " + MAX_DISTINCT_COLOR,
    },
    trigger: function (_a) {
        var chartType = _a.chartType;
        return applyChartTypes.indexOf(chartType) !== -1;
    },
    validator: function (_a) {
        var field = _a.field;
        return ((analyzer.isNominal(field) || analyzer.isOrdinal(field)) &&
            field.missing === 0 &&
            field.distinct > 1 &&
            field.distinct <= MAX_DISTINCT_COLOR);
    },
};
// TODO: Ranking numeric fiels based on field continuity, significance, validity, etc
export var fieldForSizeRule = {
    id: 'field-for-size',
    type: 'HARD',
    docs: {
        detailedText: '',
    },
    trigger: function (_a) {
        var chartType = _a.chartType;
        return applyChartTypes.indexOf(chartType) !== -1;
    },
    validator: function (_a) {
        var field = _a.field;
        return field.name === 'degree';
    },
};
export var fieldForLabel = {
    id: 'field-for-abel',
    type: 'HARD',
    docs: {
        detailedText: '',
    },
    trigger: function (_a) {
        var chartType = _a.chartType;
        return applyChartTypes.indexOf(chartType) !== -1;
    },
    validator: fieldForColorRule.validator,
};
export var encodingRules = {
    'field-for-color': fieldForColorRule,
    'field-for-size': fieldForSizeRule,
    'field-for-label': fieldForLabel,
};
