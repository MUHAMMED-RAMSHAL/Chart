import { DataFrame } from '@antv/data-wizard';
import { processRuleCfg } from '../ruler';
import { getChartType, lintRules } from './utils';
var Linter = /** @class */ (function () {
    function Linter(ruleCfg) {
        this.ruleBase = processRuleCfg(ruleCfg);
    }
    /**
     * @param params for lint, including
     *
     * - spec: chart spec written in antv-spec
     * - dataProps?: data props if customized
     * - options?: linting options
     * @returns error[], the issues violated by the chart spec
     */
    Linter.prototype.lint = function (params) {
        var lintResult = this.checkRules(params);
        var lints = lintResult.lints;
        return lints;
    };
    /**
     * Lint and return with linting log
     *
     * @param params
     */
    Linter.prototype.lintWithLog = function (params) {
        var lintResult = this.checkRules(params);
        return lintResult;
    };
    Linter.prototype.checkRules = function (params) {
        var spec = params.spec, options = params.options;
        var dataProps = params.dataProps;
        var purpose = options === null || options === void 0 ? void 0 : options.purpose;
        var preferences = options === null || options === void 0 ? void 0 : options.preferences;
        var chartType = getChartType(spec);
        var lints = [];
        // for log
        var log = [];
        if (!spec || !chartType) {
            return { lints: lints, log: log };
        }
        // step 1: get data in spec and build DataFrame
        if (!dataProps || !dataProps.length) {
            var dataFrame = void 0;
            try {
                dataFrame = new DataFrame(spec.data.values);
                dataProps = dataFrame.info();
            }
            catch (error) {
                // if the input data cannot be transformed into DataFrame
                // eslint-disable-next-line no-console
                console.error('error: ', error);
                return { lints: lints, log: log };
            }
        }
        var info = { dataProps: dataProps, chartType: chartType, purpose: purpose, preferences: preferences };
        // step 2: lint rules
        // HARD and SOFT rules
        lintRules(this.ruleBase, 'notDESIGN', info, log, lints);
        // DESIGN rules
        lintRules(this.ruleBase, 'DESIGN', info, log, lints, spec);
        // filter rules with problems (score<1)
        lints = lints.filter(function (record) { return record.score !== 1; });
        var result = {
            lints: lints,
            log: log,
        };
        return result;
    };
    return Linter;
}());
export { Linter };
export * from './interface';
