"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.layoutConfigPredRule = void 0;
var constants_1 = require("../../../constants");
var applyChartTypes = ['graph'];
exports.layoutConfigPredRule = {
    id: 'pred-layout-config',
    type: 'DESIGN',
    docs: {
        detailedText: '',
    },
    trigger: function (_a) {
        var chartType = _a.chartType;
        return applyChartTypes.indexOf(chartType) !== -1;
    },
    optimizer: function (dataProps) {
        var type = dataProps.layoutType || constants_1.DEFAULT_LAYOUT_TYPE;
        var options = {};
        switch (type) {
            case 'graphin-force': {
                options = {
                    stiffness: 200,
                    repulsion: 1000,
                    damping: 0.9, // 阻尼系数 [0,1]
                };
                break;
            }
            case 'force': {
                options = {
                    linkDistance: 100,
                    nodeStrength: 100,
                    edgeStrength: 0.2,
                    nodeSpacing: 15,
                    preventOverlap: true,
                    clustering: true,
                    nodeSize: function (d) {
                        return d.size;
                    },
                    // clusterNodeSize: (d:any) => {
                    //   return d.size;
                    // },
                    // clusterEdgeDistance: 200,
                    // clusterFociStrength: 0.5,
                };
                break;
            }
            case 'dagre': {
                options = {
                    rankdir: 'TB',
                    align: null,
                    nodesep: 10,
                    ranksep: 10, // [1, 200]
                };
                break;
            }
            case 'radial': {
                options = {
                    unitRadius: 100,
                    // focusNode: '' // '中心节点',
                    nodeSpacing: 15,
                    preventOverlap: true,
                };
                break;
            }
            case 'concentric': {
                options = {
                    sortBy: null,
                    nodeSize: 15,
                    minNodeSpacing: 10,
                    equidistant: false,
                    preventOverlap: true,
                };
                break;
            }
            case 'circular': {
                options = {
                    radius: 100,
                    divisions: 1,
                    ordering: null,
                    preventOverlap: true,
                };
                break;
            }
            case 'grid': {
                options = {
                    rows: 1,
                    cols: 1,
                    sortBy: null, // null, 'topology', 'degree'
                };
                break;
            }
            default:
        }
        var layoutCfg = {
            type: type,
            options: options,
        };
        return layoutCfg;
    },
};
