"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRules = exports.getRuleById = exports.testRule = exports.allBuiltInRules = exports.ruleSet = void 0;
var tslib_1 = require("tslib");
var pred_scale_type_1 = require("./pred-scale-type");
var pred_encoding_1 = require("./pred-encoding");
var pred_edge_type_1 = require("./pred-edge-type");
var pred_node_type_1 = require("./pred-node-type");
var pred_layout_type_1 = require("./pred-layout-type");
var pred_layout_cfg_1 = require("./pred-layout-cfg");
var layoutRules = tslib_1.__assign(tslib_1.__assign({}, pred_layout_type_1.allLayoutTypeRules), { 'pred-layout-config': pred_layout_cfg_1.layoutConfigPredRule });
exports.ruleSet = {
    scaleRules: pred_scale_type_1.scaleRules,
    encodingRules: pred_encoding_1.encodingRules,
    edgeTypeRules: pred_edge_type_1.edgeTypeRules,
    nodeTypeRules: pred_node_type_1.nodeTypeRules,
    layoutRules: layoutRules,
};
exports.allBuiltInRules = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, pred_scale_type_1.scaleRules), pred_encoding_1.encodingRules), pred_edge_type_1.edgeTypeRules), pred_node_type_1.nodeTypeRules), layoutRules);
/**
 * Check, filter and sort all candidate fields according to a soft rule or a hard rule
 * @param candidates
 * @param ruleId
 * @returns Testing the rule, and return the candidates that match the rule. If the rule scores the candidates, they are sorted from highest to lowest score.
 */
var testRule = function (candidates, ruleId) {
    var validatedCandidates = [];
    var rule = exports.allBuiltInRules[ruleId];
    if (rule.type === 'HARD') {
        validatedCandidates = candidates.filter(function (item) { return rule.validator({ field: item }); });
    }
    else if (rule.type === 'SOFT') {
        validatedCandidates = candidates.map(function (item) {
            return {
                item: item,
                score: rule.validator({ field: item }),
            };
        });
        validatedCandidates.sort(function (a, b) { return b.score - a.score; });
    }
    return validatedCandidates;
};
exports.testRule = testRule;
/**
 *
 * @param id rule id
 * @returns the rule object or null if `id` not exist in built-in rules
 */
var getRuleById = function (id) {
    if (Object.keys(exports.allBuiltInRules).includes(id)) {
        return exports.allBuiltInRules[id];
    }
    return null;
};
exports.getRuleById = getRuleById;
/**
 *
 * @param ids rule list
 * @returns rule object record
 */
var getRules = function (ids) {
    if (!ids || !ids.length) {
        return exports.allBuiltInRules;
    }
    var chartRules = {};
    ids.forEach(function (id) {
        if (Object.keys(exports.allBuiltInRules).includes(id)) {
            chartRules[id] = exports.allBuiltInRules[id];
        }
    });
    return chartRules;
};
exports.getRules = getRules;
