import type { BasicDataPropertyForAdvice, RuleModule } from '../../interface';
export declare const ruleSet: {
    scaleRules: {
        'pred-scale-type': import("../../interface").DesignRuleModule;
    };
    encodingRules: {
        'field-for-color': import("../../interface").ChartRuleModule;
        'field-for-size': import("../../interface").ChartRuleModule;
        'field-for-label': import("../../interface").ChartRuleModule;
    };
    edgeTypeRules: {
        'pred-edge-type': import("../../interface").DesignRuleModule;
    };
    nodeTypeRules: {
        'pred-node-type': import("../../interface").DesignRuleModule;
    };
    layoutRules: {
        'pred-layout-config': RuleModule;
        dagre: import("../../interface").ChartRuleModule;
        circular: import("../../interface").ChartRuleModule;
        concentric: import("../../interface").ChartRuleModule;
        radial: import("../../interface").ChartRuleModule;
        grid: import("../../interface").ChartRuleModule;
        force: import("../../interface").ChartRuleModule;
    };
};
export declare const allBuiltInRules: {
    'pred-layout-config': RuleModule;
    dagre: import("../../interface").ChartRuleModule;
    circular: import("../../interface").ChartRuleModule;
    concentric: import("../../interface").ChartRuleModule;
    radial: import("../../interface").ChartRuleModule;
    grid: import("../../interface").ChartRuleModule;
    force: import("../../interface").ChartRuleModule;
    'pred-node-type': import("../../interface").DesignRuleModule;
    'pred-edge-type': import("../../interface").DesignRuleModule;
    'field-for-color': import("../../interface").ChartRuleModule;
    'field-for-size': import("../../interface").ChartRuleModule;
    'field-for-label': import("../../interface").ChartRuleModule;
    'pred-scale-type': import("../../interface").DesignRuleModule;
};
/**
 * Check, filter and sort all candidate fields according to a soft rule or a hard rule
 * @param candidates
 * @param ruleId
 * @returns Testing the rule, and return the candidates that match the rule. If the rule scores the candidates, they are sorted from highest to lowest score.
 */
export declare const testRule: (candidates: BasicDataPropertyForAdvice[], ruleId: string) => BasicDataPropertyForAdvice[];
/**
 *
 * @param id rule id
 * @returns the rule object or null if `id` not exist in built-in rules
 */
export declare const getRuleById: (id: string) => RuleModule | null;
/**
 *
 * @param ids rule list
 * @returns rule object record
 */
export declare const getRules: (ids?: string[]) => Record<string, RuleModule>;
