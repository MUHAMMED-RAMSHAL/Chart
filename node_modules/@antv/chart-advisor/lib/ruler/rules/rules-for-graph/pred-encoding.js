"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodingRules = exports.fieldForLabel = exports.fieldForSizeRule = exports.fieldForColorRule = void 0;
var data_wizard_1 = require("@antv/data-wizard");
var constants_1 = require("../../../constants");
var applyChartTypes = ['graph'];
exports.fieldForColorRule = {
    id: 'field-for-node-color',
    type: 'HARD',
    docs: {
        detailedText: "A field can encode to color if is nominal or ordinal, and the number of its distinct values is less than " + constants_1.MAX_DISTINCT_COLOR,
    },
    trigger: function (_a) {
        var chartType = _a.chartType;
        return applyChartTypes.indexOf(chartType) !== -1;
    },
    validator: function (_a) {
        var field = _a.field;
        return ((data_wizard_1.analyzer.isNominal(field) || data_wizard_1.analyzer.isOrdinal(field)) &&
            field.missing === 0 &&
            field.distinct > 1 &&
            field.distinct <= constants_1.MAX_DISTINCT_COLOR);
    },
};
// TODO: Ranking numeric fiels based on field continuity, significance, validity, etc
exports.fieldForSizeRule = {
    id: 'field-for-size',
    type: 'HARD',
    docs: {
        detailedText: '',
    },
    trigger: function (_a) {
        var chartType = _a.chartType;
        return applyChartTypes.indexOf(chartType) !== -1;
    },
    validator: function (_a) {
        var field = _a.field;
        return field.name === 'degree';
    },
};
exports.fieldForLabel = {
    id: 'field-for-abel',
    type: 'HARD',
    docs: {
        detailedText: '',
    },
    trigger: function (_a) {
        var chartType = _a.chartType;
        return applyChartTypes.indexOf(chartType) !== -1;
    },
    validator: exports.fieldForColorRule.validator,
};
exports.encodingRules = {
    'field-for-color': exports.fieldForColorRule,
    'field-for-size': exports.fieldForSizeRule,
    'field-for-label': exports.fieldForLabel,
};
