"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nominalEnumCombinatorial = void 0;
var ckb_1 = require("@antv/ckb");
var utils_1 = require("../../utils");
var utils_2 = require("../utils");
var Wiki = ckb_1.CKBJson('en-US', true);
var allChartTypes = Object.keys(Wiki);
var applyChartTypes = [
    'bar_chart',
    'column_chart',
    'grouped_bar_chart',
    'grouped_column_chart',
    'stacked_bar_chart',
    'stacked_column_chart',
];
function getNominalFields(dataProps) {
    return dataProps.filter(function (field) { return utils_1.hasSubset(field.levelOfMeasurements, ['Nominal']); });
}
exports.nominalEnumCombinatorial = {
    id: 'nominal-enum-combinatorial',
    type: 'SOFT',
    docs: {
        lintText: 'Single (Basic) and Multi (Stacked, Grouped,...) charts should be optimized recommended by nominal enums combinatorial numbers.',
    },
    trigger: function (_a) {
        var chartType = _a.chartType;
        return applyChartTypes.includes(chartType) && getNominalFields.length >= 2;
    },
    validator: function (args) {
        var result = 0;
        var dataProps = args.dataProps, chartType = args.chartType;
        if (dataProps && allChartTypes) {
            var nominalFields = getNominalFields(dataProps);
            if (nominalFields.length >= 2) {
                var sortedNominals = nominalFields.sort(utils_2.compare);
                var f1 = sortedNominals[0];
                var f2 = sortedNominals[1];
                if (f1.distinct === f1.count) {
                    if (['bar_chart', 'column_chart'].includes(chartType)) {
                        result = 1;
                    }
                }
                if (f1.count && f1.distinct && f2.distinct && f1.count > f1.distinct) {
                    var typeOptions = [
                        'grouped_bar_chart',
                        'grouped_column_chart',
                        'stacked_bar_chart',
                        'stacked_column_chart',
                    ];
                    if (typeOptions.includes(chartType)) {
                        result = 1;
                    }
                }
            }
        }
        return result;
    },
};
