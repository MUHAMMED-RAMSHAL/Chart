"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChartAdvisor = void 0;
var tslib_1 = require("tslib");
var advisor_1 = require("../advisor");
var linter_1 = require("../linter");
var ChartAdvisor = /** @class */ (function () {
    function ChartAdvisor(config) {
        if (config === void 0) { config = {}; }
        this.advisor = new advisor_1.Advisor(config);
        this.linter = new linter_1.Linter(config.ruleCfg);
    }
    ChartAdvisor.prototype.advise = function (params) {
        var result = this.adviseWithLog(params);
        var advices = result.advices;
        return advices;
    };
    /**
     * Advising charts by data and providing linting results for each chart
     */
    ChartAdvisor.prototype.adviseWithLog = function (params) {
        var _this = this;
        var dataProps = params.dataProps, options = params.options;
        // advising
        var adviceResult = this.advisor.adviseWithLog(params);
        var advices = adviceResult.advices, log = adviceResult.log;
        // linting
        var advicesAfterLint = advices.map(function (advice) {
            var _a;
            // No lint suggestions for graph visualization for now
            if (advice.type === 'graph') {
                return tslib_1.__assign(tslib_1.__assign({}, advice), { lint: [] });
            }
            var _b = _this.linter.lintWithLog({
                spec: advice.spec,
                dataProps: dataProps,
                options: options,
            }), lints = _b.lints, lintLog = _b.log;
            (_a = log.find(function (l) { return l.chartType === advice.type; }).log).push.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(lintLog)));
            return tslib_1.__assign(tslib_1.__assign({}, advice), { lint: lints });
        });
        var result = {
            advices: advicesAfterLint,
            log: log,
        };
        return result;
    };
    return ChartAdvisor;
}());
exports.ChartAdvisor = ChartAdvisor;
