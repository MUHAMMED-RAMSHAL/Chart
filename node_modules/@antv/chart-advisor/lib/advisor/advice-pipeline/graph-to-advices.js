"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.graphdataToAdvices = exports.edgeFields2Style = exports.nodeFields2Style = exports.graph2LayoutTypes = void 0;
var tslib_1 = require("tslib");
var rules_for_graph_1 = require("../../ruler/rules/rules-for-graph");
var constants_1 = require("../../constants");
var utils_1 = require("../utils");
/**
 * map graph properties to layout configurations
 * @param dataProps
 * @return LayoutTypes[]
 */
function graph2LayoutTypes(dataProps) {
    var candidates = [];
    constants_1.ALL_LAYOUT_TYPES.forEach(function (layoutType) {
        var rule = rules_for_graph_1.allBuiltInRules[layoutType];
        candidates.push({
            type: layoutType,
            score: rule.validator(dataProps),
        });
    });
    var sortedTypes = candidates.filter(function (item) { return item.score > 0; }).sort(function (a, b) { return b.score - a.score; });
    if (!sortedTypes.length)
        sortedTypes.push({ type: constants_1.DEFAULT_LAYOUT_TYPE, score: 1 });
    return sortedTypes;
}
exports.graph2LayoutTypes = graph2LayoutTypes;
/**
 * Recommended configurations based on the optimization policy and user configuration
 */
var optimizeByRule = function (dataProps, ruleId, graphSpec) {
    var rule = rules_for_graph_1.allBuiltInRules[ruleId];
    var result = rule.optimizer(dataProps, graphSpec);
    return result;
};
/**
 * map node data properties to points visual properties
 */
function nodeFields2Style(dataProps, userCfg) {
    var nodeFeats = dataProps.nodeFeats, nodeFieldsInfo = dataProps.nodeFieldsInfo;
    var nodeFields = nodeFieldsInfo.concat(nodeFeats);
    // choose fields for encoding
    var _a = tslib_1.__read(rules_for_graph_1.testRule(nodeFields, 'field-for-color'), 1), fieldForColor = _a[0];
    var _b = tslib_1.__read(rules_for_graph_1.testRule(nodeFields, 'field-for-size'), 1), fieldForSize = _b[0];
    var _c = tslib_1.__read(rules_for_graph_1.testRule(nodeFields, 'field-for-label'), 1), fieldForLabel = _c[0];
    // optimize encoding configurations
    var colorScaleType = optimizeByRule(fieldForColor, 'pred-scale-type');
    var sizeScaleType = optimizeByRule(fieldForSize, 'pred-scale-type');
    var nodeType = optimizeByRule(dataProps, 'pred-node-type').nodeType;
    // convert configurations to AntVSpec
    var color = fieldForColor
        ? {
            field: fieldForColor.name,
            type: colorScaleType,
            scale: {
                range: (userCfg === null || userCfg === void 0 ? void 0 : userCfg.nodeColors) || constants_1.DEFAULT_COLORS,
                domain: Object.keys(fieldForColor.valueMap),
            },
        }
        : {};
    var size = fieldForSize
        ? {
            field: fieldForSize.name,
            type: sizeScaleType,
            scale: {
                range: (userCfg === null || userCfg === void 0 ? void 0 : userCfg.nodeSizeRange) || constants_1.DEFAULT_NODE_SIZE_RANGE,
                domain: [fieldForSize.minimum, fieldForSize.maximum],
            },
        }
        : {};
    var label = fieldForLabel
        ? {
            field: fieldForLabel.name,
            showlabel: true,
        }
        : {};
    var nodeSpec = {
        mark: nodeType || 'point',
        encoding: {
            size: size,
            color: color,
            label: label,
        },
    };
    return nodeSpec;
}
exports.nodeFields2Style = nodeFields2Style;
/**
 * map edge data properties to line visual properties
 */
/* eslint-disable no-param-reassign */
function edgeFields2Style(dataProps, userCfg) {
    var linkFeats = dataProps.linkFeats, linkFieldsInfo = dataProps.linkFieldsInfo;
    var linkFields = linkFieldsInfo.concat(linkFeats);
    var _a = tslib_1.__read(rules_for_graph_1.testRule(linkFields, 'field-for-size'), 1), fieldForWidth = _a[0];
    var sizeScaleType = optimizeByRule(fieldForWidth, 'pred-scale-type');
    var edgeType = optimizeByRule(dataProps, 'pred-edge-type').edgeType;
    var size = fieldForWidth
        ? {
            field: fieldForWidth.name,
            type: sizeScaleType,
            scale: {
                range: (userCfg === null || userCfg === void 0 ? void 0 : userCfg.linkWidthRange) || constants_1.DEFAULT_EDGE_WIDTH_RANGE,
                domain: [fieldForWidth.minimum, fieldForWidth.maximum],
            },
        }
        : {};
    var links = {
        mark: 'line',
        encoding: {
            size: size,
            type: edgeType,
        },
    };
    return links;
}
exports.edgeFields2Style = edgeFields2Style;
/**
 * recommending graph visualization given graph dataProps
 * @param dataProps data props derived from data-wizard or customized by users
 */
/* eslint-disable no-param-reassign */
function graphdataToAdvices(data, dataProps, options) {
    var recommendSpecs = [];
    var basics = {
        data: {
            type: 'json',
            values: data,
        },
        basis: {
            type: 'graph',
        },
        layout: {
            nodes: 'nodes',
            links: 'links',
        },
    };
    // Fisrt, decide the layout type and options
    var layoutTypes = graph2LayoutTypes(dataProps);
    // Then, optimize configurations for each layout
    layoutTypes.forEach(function (layoutType) {
        var type = layoutType.type, score = layoutType.score;
        var layoutOptions = optimizeByRule(dataProps, 'pred-layout-config');
        var layout = {
            type: type,
            options: layoutOptions === null || layoutOptions === void 0 ? void 0 : layoutOptions.options,
        };
        var links = edgeFields2Style(tslib_1.__assign(tslib_1.__assign({}, dataProps), { layoutType: type }), options);
        var nodes = nodeFields2Style(tslib_1.__assign(tslib_1.__assign({}, dataProps), { layoutType: type }), options);
        var spec = {
            layout: layout,
            layer: [
                {
                    nodes: nodes,
                    links: links,
                },
            ],
        };
        recommendSpecs.push({ type: 'graph', spec: utils_1.deepMix(spec, basics), score: score });
    });
    return recommendSpecs;
}
exports.graphdataToAdvices = graphdataToAdvices;
