import { analyzer } from '@antv/data-wizard';
import type { Advice } from '../../types';
/**
 * map graph properties to layout configurations
 * @param dataProps
 * @return LayoutTypes[]
 */
export declare function graph2LayoutTypes(dataProps: Partial<analyzer.GraphProps>): any[];
/**
 * map node data properties to points visual properties
 */
export declare function nodeFields2Style(dataProps: Partial<analyzer.GraphProps>, userCfg?: {
    [key: string]: any;
}): {
    mark: any;
    encoding: {
        size: {
            field: string;
            type: any;
            scale: {
                range: any;
                domain: any[];
            };
        } | {
            field?: undefined;
            type?: undefined;
            scale?: undefined;
        };
        color: {
            field: string;
            type: any;
            scale: {
                range: any;
                domain: string[];
            };
        } | {
            field?: undefined;
            type?: undefined;
            scale?: undefined;
        };
        label: {
            field: string;
            showlabel: boolean;
        } | {
            field?: undefined;
            showlabel?: undefined;
        };
    };
};
/**
 * map edge data properties to line visual properties
 */
export declare function edgeFields2Style(dataProps: Partial<analyzer.GraphProps>, userCfg?: {
    [key: string]: any;
}): {
    mark: string;
    encoding: {
        size: {
            field: string;
            type: any;
            scale: {
                range: any;
                domain: any[];
            };
        } | {
            field?: undefined;
            type?: undefined;
            scale?: undefined;
        };
        type: any;
    };
};
/**
 * recommending graph visualization given graph dataProps
 * @param dataProps data props derived from data-wizard or customized by users
 */
export declare function graphdataToAdvices(data: any, dataProps: Partial<analyzer.GraphProps>, options?: any): Advice[];
