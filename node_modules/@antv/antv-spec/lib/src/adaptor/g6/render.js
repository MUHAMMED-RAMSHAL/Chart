"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.g6Render = void 0;
const tslib_1 = require("tslib");
const g6_1 = (0, tslib_1.__importDefault)(require("@antv/g6"));
function g6Render(g6Cfg, container) {
    if ((g6Cfg === null || g6Cfg === void 0 ? void 0 : g6Cfg.data) && (g6Cfg === null || g6Cfg === void 0 ? void 0 : g6Cfg.cfg) && container) {
        const graph = new g6_1.default.Graph({
            container,
            ...g6Cfg.cfg,
        });
        graph.data(g6Cfg.data);
        graph.render();
        // auto resize the graph to fit the container viewport
        const resizeGraphToFit = () => {
            const width = container.clientWidth;
            const height = container.clientHeight;
            if (width && height) {
                const maxX = Math.max(...graph.getNodes().map((node) => node.getModel().x));
                const maxY = Math.max(...graph.getNodes().map((node) => node.getModel().y));
                const { x: clientMaxX, y: clientMaxY } = graph.getClientByPoint(maxX, maxY);
                graph.zoomTo(Math.min(width / clientMaxX, height / clientMaxY));
                graph.changeSize(width, height);
            }
        };
        resizeGraphToFit();
        window.onresize = () => {
            resizeGraphToFit();
        };
        return graph;
    }
    return null;
}
exports.g6Render = g6Render;
//# sourceMappingURL=render.js.map