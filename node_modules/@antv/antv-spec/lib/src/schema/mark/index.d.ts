export declare type Mark = MarkType | {
    type: MarkType;
    style?: MarkStyleConfig;
};
/**
 * Mark definition for `Chart` type visualization
 */
export declare type ChartMarkDef = ChartMarkType | {
    type: ChartMarkType;
    /**
     * for `line` and `area` only
     * TODO: 'step' is used in AVA but more interpolate type can be defined
     */
    interpolate?: 'step';
    style?: MarkStyleConfig;
};
/**
 * Mark definition for node of `Graph` type visualization
 */
export declare type NodeMarkDef = NodeMarkType | {
    type: NodeMarkType;
    style?: MarkStyleConfig;
};
/**
 * Mark definition for link of `Graph` type visualization
 */
export declare type LinkMarkDef = LinkMarkType | {
    type: LinkMarkType;
    style?: MarkStyleConfig;
};
/**
 * Mark type supported by antv-spec
 */
export declare type MarkType = ChartMarkType | GraphMarkType;
export declare const CHART_MARK_TYPES: readonly ["bar", "line", "arc", "area", "point", "rect"];
export declare type ChartMarkType = typeof CHART_MARK_TYPES[number];
export declare type GraphMarkType = NodeMarkType & LinkMarkType;
export declare const NODE_MARK_TYPES: string[];
export declare type NodeMarkType = typeof NODE_MARK_TYPES[number];
export declare const LINK_MARK_TYPES: string[];
export declare type LinkMarkType = typeof LINK_MARK_TYPES[number];
/**
 * Mark style configuration
 */
interface MarkStyleConfig {
    size?: number;
    lineWidth?: number;
    strokeWidth?: number;
    color?: ColorCfg;
    fillColor?: ColorCfg;
    strokeColor?: ColorCfg;
    opacity?: number;
    fillOpacity?: number;
    strokeOpacity?: number;
    shape?: string;
    innerRadius?: number;
}
export declare type ColorCfg = string;
export interface RGBColor {
    /**
     * @minimum 0
     * @maximum 255
     */
    r: number;
    /**
     * @minimum 0
     * @maximum 255
     */
    g: number;
    /**
     * @minimum 0
     * @maximum 255
     */
    b: number;
}
export interface HSLColor {
    /**
     * @minimum 0
     * @maximum 360
     */
    h: number;
    /**
     * @minimum 0
     * @maximum 1
     */
    s: number;
    /**
     * @minimum 0
     * @maximum 1
     */
    l: number;
}
export {};
